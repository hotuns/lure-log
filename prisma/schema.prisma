datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PowerValue {
  UL
  L
  ML
  M
  MH
  H
  XH
}

enum Action {
  ExtraFast
  Fast
  MediumFast
  Medium
  MediumSlow
  Slow
}

enum Braking {
  NoBraking
  SpoolTension
  Centrifugal
  Magnetic
  Electronic
}

enum ReelType {
  Spinning
  Casting
  Conventional
}

// 用户
model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  username String    @unique
  phone    String    @unique
  email    String?   @unique
  avatar   String?
  password String
  backpack Backpack?
  combos   Combo[]
  records  Record[]
}

// 背包
model Backpack {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  fishingRods  FishingRod[]
  fishingReels FishingReel[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique @db.ObjectId
}

// 钓竿
model FishingRod {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  brand      String
  model      String
  length     Float
  sections   Int
  powerValue PowerValue
  action     Action
  backpack   Backpack   @relation(fields: [backpackId], references: [id])
  backpackId String     @db.ObjectId
  Combo      Combo[]
}

// 卷线器
model FishingReel {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       ReelType
  brand      String
  model      String
  weight     Float
  gearRatio  Float
  braking    Braking
  backpack   Backpack @relation(fields: [backpackId], references: [id])
  backpackId String   @db.ObjectId
  Combo      Combo[]
}

// 组合
model Combo {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  fishingRodId  String      @db.ObjectId
  fishingRod    FishingRod  @relation(fields: [fishingRodId], references: [id])
  fishingReelId String      @db.ObjectId
  fishingReel   FishingReel @relation(fields: [fishingReelId], references: [id])
  records       Record[]
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
}

// 钓鱼记录
model Record {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  time        DateTime @default(now())
  description String?

  user          User         @relation(fields: [userId], references: [id])
  userId        String       @db.ObjectId
  fishingSpot   FishingSpot? @relation(fields: [fishingSpotId], references: [id])
  fishingSpotId String?      @db.ObjectId
  Combo         Combo        @relation(fields: [comboId], references: [id])
  comboId       String       @db.ObjectId
  fishCatch     FishCatch    @relation(fields: [fishCatchId], references: [id])
  fishCatchId   String       @unique @db.ObjectId
}

// 钓点
model FishingSpot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  polygon     Json // 存储GeoJSON,多边形数据
  center      Json // 存储GeoJSON,中心点数据
  description String?
  records     Record[]
  tagIds      String[] @db.ObjectId
  tags        Tag[]    @relation(fields: [tagIds], references: [id])
}

// 标签
model Tag {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?

  fishingSpotIds String[]      @db.ObjectId
  fishingSpots   FishingSpot[] @relation(fields: [fishingSpotIds], references: [id])
}

// 鱼获
model FishCatch {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  speciesId String?      @db.ObjectId
  species   FishSpecies? @relation(fields: [speciesId], references: [id])
  length    Float
  weight    Float
  Record    Record?
}

// 鱼种
model FishSpecies {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageURL    String?
  fishCatch   FishCatch[]
}
